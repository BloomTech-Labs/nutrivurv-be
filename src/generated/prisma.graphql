# source: http://192.168.99.100:4466
# timestamp: Sat Feb 08 2020 20:46:43 GMT-0700 (Mountain Standard Time)

type AggregateDailyRecord {
  count: Int!
}

type AggregateProfile {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type DailyRecord implements Node {
  id: ID!
  user_id: String!
  date: String!
  current_weight: Int!
  calories: Int!
  fat: Int!
  carbs: Int!
  fiber: Int!
  protein: Int!
  food_string: String!
  user: User!
}

"""A connection to a list of items."""
type DailyRecordConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DailyRecordEdge]!
  aggregate: AggregateDailyRecord!
}

input DailyRecordCreateInput {
  id: ID
  user_id: String!
  date: String!
  current_weight: Int!
  calories: Int!
  fat: Int!
  carbs: Int!
  fiber: Int!
  protein: Int!
  food_string: String!
  user: UserCreateOneWithoutDaily_recordsInput!
}

input DailyRecordCreateManyWithoutUserInput {
  create: [DailyRecordCreateWithoutUserInput!]
  connect: [DailyRecordWhereUniqueInput!]
}

input DailyRecordCreateWithoutUserInput {
  id: ID
  user_id: String!
  date: String!
  current_weight: Int!
  calories: Int!
  fat: Int!
  carbs: Int!
  fiber: Int!
  protein: Int!
  food_string: String!
}

"""An edge in a connection."""
type DailyRecordEdge {
  """The item at the end of the edge."""
  node: DailyRecord!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DailyRecordOrderByInput {
  id_ASC
  id_DESC
  user_id_ASC
  user_id_DESC
  date_ASC
  date_DESC
  current_weight_ASC
  current_weight_DESC
  calories_ASC
  calories_DESC
  fat_ASC
  fat_DESC
  carbs_ASC
  carbs_DESC
  fiber_ASC
  fiber_DESC
  protein_ASC
  protein_DESC
  food_string_ASC
  food_string_DESC
}

type DailyRecordPreviousValues {
  id: ID!
  user_id: String!
  date: String!
  current_weight: Int!
  calories: Int!
  fat: Int!
  carbs: Int!
  fiber: Int!
  protein: Int!
  food_string: String!
}

input DailyRecordScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DailyRecordScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DailyRecordScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DailyRecordScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user_id: String

  """All values that are not equal to given value."""
  user_id_not: String

  """All values that are contained in given list."""
  user_id_in: [String!]

  """All values that are not contained in given list."""
  user_id_not_in: [String!]

  """All values less than the given value."""
  user_id_lt: String

  """All values less than or equal the given value."""
  user_id_lte: String

  """All values greater than the given value."""
  user_id_gt: String

  """All values greater than or equal the given value."""
  user_id_gte: String

  """All values containing the given string."""
  user_id_contains: String

  """All values not containing the given string."""
  user_id_not_contains: String

  """All values starting with the given string."""
  user_id_starts_with: String

  """All values not starting with the given string."""
  user_id_not_starts_with: String

  """All values ending with the given string."""
  user_id_ends_with: String

  """All values not ending with the given string."""
  user_id_not_ends_with: String
  date: String

  """All values that are not equal to given value."""
  date_not: String

  """All values that are contained in given list."""
  date_in: [String!]

  """All values that are not contained in given list."""
  date_not_in: [String!]

  """All values less than the given value."""
  date_lt: String

  """All values less than or equal the given value."""
  date_lte: String

  """All values greater than the given value."""
  date_gt: String

  """All values greater than or equal the given value."""
  date_gte: String

  """All values containing the given string."""
  date_contains: String

  """All values not containing the given string."""
  date_not_contains: String

  """All values starting with the given string."""
  date_starts_with: String

  """All values not starting with the given string."""
  date_not_starts_with: String

  """All values ending with the given string."""
  date_ends_with: String

  """All values not ending with the given string."""
  date_not_ends_with: String
  current_weight: Int

  """All values that are not equal to given value."""
  current_weight_not: Int

  """All values that are contained in given list."""
  current_weight_in: [Int!]

  """All values that are not contained in given list."""
  current_weight_not_in: [Int!]

  """All values less than the given value."""
  current_weight_lt: Int

  """All values less than or equal the given value."""
  current_weight_lte: Int

  """All values greater than the given value."""
  current_weight_gt: Int

  """All values greater than or equal the given value."""
  current_weight_gte: Int
  calories: Int

  """All values that are not equal to given value."""
  calories_not: Int

  """All values that are contained in given list."""
  calories_in: [Int!]

  """All values that are not contained in given list."""
  calories_not_in: [Int!]

  """All values less than the given value."""
  calories_lt: Int

  """All values less than or equal the given value."""
  calories_lte: Int

  """All values greater than the given value."""
  calories_gt: Int

  """All values greater than or equal the given value."""
  calories_gte: Int
  fat: Int

  """All values that are not equal to given value."""
  fat_not: Int

  """All values that are contained in given list."""
  fat_in: [Int!]

  """All values that are not contained in given list."""
  fat_not_in: [Int!]

  """All values less than the given value."""
  fat_lt: Int

  """All values less than or equal the given value."""
  fat_lte: Int

  """All values greater than the given value."""
  fat_gt: Int

  """All values greater than or equal the given value."""
  fat_gte: Int
  carbs: Int

  """All values that are not equal to given value."""
  carbs_not: Int

  """All values that are contained in given list."""
  carbs_in: [Int!]

  """All values that are not contained in given list."""
  carbs_not_in: [Int!]

  """All values less than the given value."""
  carbs_lt: Int

  """All values less than or equal the given value."""
  carbs_lte: Int

  """All values greater than the given value."""
  carbs_gt: Int

  """All values greater than or equal the given value."""
  carbs_gte: Int
  fiber: Int

  """All values that are not equal to given value."""
  fiber_not: Int

  """All values that are contained in given list."""
  fiber_in: [Int!]

  """All values that are not contained in given list."""
  fiber_not_in: [Int!]

  """All values less than the given value."""
  fiber_lt: Int

  """All values less than or equal the given value."""
  fiber_lte: Int

  """All values greater than the given value."""
  fiber_gt: Int

  """All values greater than or equal the given value."""
  fiber_gte: Int
  protein: Int

  """All values that are not equal to given value."""
  protein_not: Int

  """All values that are contained in given list."""
  protein_in: [Int!]

  """All values that are not contained in given list."""
  protein_not_in: [Int!]

  """All values less than the given value."""
  protein_lt: Int

  """All values less than or equal the given value."""
  protein_lte: Int

  """All values greater than the given value."""
  protein_gt: Int

  """All values greater than or equal the given value."""
  protein_gte: Int
  food_string: String

  """All values that are not equal to given value."""
  food_string_not: String

  """All values that are contained in given list."""
  food_string_in: [String!]

  """All values that are not contained in given list."""
  food_string_not_in: [String!]

  """All values less than the given value."""
  food_string_lt: String

  """All values less than or equal the given value."""
  food_string_lte: String

  """All values greater than the given value."""
  food_string_gt: String

  """All values greater than or equal the given value."""
  food_string_gte: String

  """All values containing the given string."""
  food_string_contains: String

  """All values not containing the given string."""
  food_string_not_contains: String

  """All values starting with the given string."""
  food_string_starts_with: String

  """All values not starting with the given string."""
  food_string_not_starts_with: String

  """All values ending with the given string."""
  food_string_ends_with: String

  """All values not ending with the given string."""
  food_string_not_ends_with: String
}

type DailyRecordSubscriptionPayload {
  mutation: MutationType!
  node: DailyRecord
  updatedFields: [String!]
  previousValues: DailyRecordPreviousValues
}

input DailyRecordSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DailyRecordSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DailyRecordSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DailyRecordSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DailyRecordWhereInput
}

input DailyRecordUpdateInput {
  user_id: String
  date: String
  current_weight: Int
  calories: Int
  fat: Int
  carbs: Int
  fiber: Int
  protein: Int
  food_string: String
  user: UserUpdateOneRequiredWithoutDaily_recordsInput
}

input DailyRecordUpdateManyDataInput {
  user_id: String
  date: String
  current_weight: Int
  calories: Int
  fat: Int
  carbs: Int
  fiber: Int
  protein: Int
  food_string: String
}

input DailyRecordUpdateManyMutationInput {
  user_id: String
  date: String
  current_weight: Int
  calories: Int
  fat: Int
  carbs: Int
  fiber: Int
  protein: Int
  food_string: String
}

input DailyRecordUpdateManyWithoutUserInput {
  create: [DailyRecordCreateWithoutUserInput!]
  connect: [DailyRecordWhereUniqueInput!]
  set: [DailyRecordWhereUniqueInput!]
  disconnect: [DailyRecordWhereUniqueInput!]
  delete: [DailyRecordWhereUniqueInput!]
  update: [DailyRecordUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [DailyRecordUpdateManyWithWhereNestedInput!]
  deleteMany: [DailyRecordScalarWhereInput!]
  upsert: [DailyRecordUpsertWithWhereUniqueWithoutUserInput!]
}

input DailyRecordUpdateManyWithWhereNestedInput {
  where: DailyRecordScalarWhereInput!
  data: DailyRecordUpdateManyDataInput!
}

input DailyRecordUpdateWithoutUserDataInput {
  user_id: String
  date: String
  current_weight: Int
  calories: Int
  fat: Int
  carbs: Int
  fiber: Int
  protein: Int
  food_string: String
}

input DailyRecordUpdateWithWhereUniqueWithoutUserInput {
  where: DailyRecordWhereUniqueInput!
  data: DailyRecordUpdateWithoutUserDataInput!
}

input DailyRecordUpsertWithWhereUniqueWithoutUserInput {
  where: DailyRecordWhereUniqueInput!
  update: DailyRecordUpdateWithoutUserDataInput!
  create: DailyRecordCreateWithoutUserInput!
}

input DailyRecordWhereInput {
  """Logical AND on all given filters."""
  AND: [DailyRecordWhereInput!]

  """Logical OR on all given filters."""
  OR: [DailyRecordWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DailyRecordWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user_id: String

  """All values that are not equal to given value."""
  user_id_not: String

  """All values that are contained in given list."""
  user_id_in: [String!]

  """All values that are not contained in given list."""
  user_id_not_in: [String!]

  """All values less than the given value."""
  user_id_lt: String

  """All values less than or equal the given value."""
  user_id_lte: String

  """All values greater than the given value."""
  user_id_gt: String

  """All values greater than or equal the given value."""
  user_id_gte: String

  """All values containing the given string."""
  user_id_contains: String

  """All values not containing the given string."""
  user_id_not_contains: String

  """All values starting with the given string."""
  user_id_starts_with: String

  """All values not starting with the given string."""
  user_id_not_starts_with: String

  """All values ending with the given string."""
  user_id_ends_with: String

  """All values not ending with the given string."""
  user_id_not_ends_with: String
  date: String

  """All values that are not equal to given value."""
  date_not: String

  """All values that are contained in given list."""
  date_in: [String!]

  """All values that are not contained in given list."""
  date_not_in: [String!]

  """All values less than the given value."""
  date_lt: String

  """All values less than or equal the given value."""
  date_lte: String

  """All values greater than the given value."""
  date_gt: String

  """All values greater than or equal the given value."""
  date_gte: String

  """All values containing the given string."""
  date_contains: String

  """All values not containing the given string."""
  date_not_contains: String

  """All values starting with the given string."""
  date_starts_with: String

  """All values not starting with the given string."""
  date_not_starts_with: String

  """All values ending with the given string."""
  date_ends_with: String

  """All values not ending with the given string."""
  date_not_ends_with: String
  current_weight: Int

  """All values that are not equal to given value."""
  current_weight_not: Int

  """All values that are contained in given list."""
  current_weight_in: [Int!]

  """All values that are not contained in given list."""
  current_weight_not_in: [Int!]

  """All values less than the given value."""
  current_weight_lt: Int

  """All values less than or equal the given value."""
  current_weight_lte: Int

  """All values greater than the given value."""
  current_weight_gt: Int

  """All values greater than or equal the given value."""
  current_weight_gte: Int
  calories: Int

  """All values that are not equal to given value."""
  calories_not: Int

  """All values that are contained in given list."""
  calories_in: [Int!]

  """All values that are not contained in given list."""
  calories_not_in: [Int!]

  """All values less than the given value."""
  calories_lt: Int

  """All values less than or equal the given value."""
  calories_lte: Int

  """All values greater than the given value."""
  calories_gt: Int

  """All values greater than or equal the given value."""
  calories_gte: Int
  fat: Int

  """All values that are not equal to given value."""
  fat_not: Int

  """All values that are contained in given list."""
  fat_in: [Int!]

  """All values that are not contained in given list."""
  fat_not_in: [Int!]

  """All values less than the given value."""
  fat_lt: Int

  """All values less than or equal the given value."""
  fat_lte: Int

  """All values greater than the given value."""
  fat_gt: Int

  """All values greater than or equal the given value."""
  fat_gte: Int
  carbs: Int

  """All values that are not equal to given value."""
  carbs_not: Int

  """All values that are contained in given list."""
  carbs_in: [Int!]

  """All values that are not contained in given list."""
  carbs_not_in: [Int!]

  """All values less than the given value."""
  carbs_lt: Int

  """All values less than or equal the given value."""
  carbs_lte: Int

  """All values greater than the given value."""
  carbs_gt: Int

  """All values greater than or equal the given value."""
  carbs_gte: Int
  fiber: Int

  """All values that are not equal to given value."""
  fiber_not: Int

  """All values that are contained in given list."""
  fiber_in: [Int!]

  """All values that are not contained in given list."""
  fiber_not_in: [Int!]

  """All values less than the given value."""
  fiber_lt: Int

  """All values less than or equal the given value."""
  fiber_lte: Int

  """All values greater than the given value."""
  fiber_gt: Int

  """All values greater than or equal the given value."""
  fiber_gte: Int
  protein: Int

  """All values that are not equal to given value."""
  protein_not: Int

  """All values that are contained in given list."""
  protein_in: [Int!]

  """All values that are not contained in given list."""
  protein_not_in: [Int!]

  """All values less than the given value."""
  protein_lt: Int

  """All values less than or equal the given value."""
  protein_lte: Int

  """All values greater than the given value."""
  protein_gt: Int

  """All values greater than or equal the given value."""
  protein_gte: Int
  food_string: String

  """All values that are not equal to given value."""
  food_string_not: String

  """All values that are contained in given list."""
  food_string_in: [String!]

  """All values that are not contained in given list."""
  food_string_not_in: [String!]

  """All values less than the given value."""
  food_string_lt: String

  """All values less than or equal the given value."""
  food_string_lte: String

  """All values greater than the given value."""
  food_string_gt: String

  """All values greater than or equal the given value."""
  food_string_gte: String

  """All values containing the given string."""
  food_string_contains: String

  """All values not containing the given string."""
  food_string_not_contains: String

  """All values starting with the given string."""
  food_string_starts_with: String

  """All values not starting with the given string."""
  food_string_not_starts_with: String

  """All values ending with the given string."""
  food_string_ends_with: String

  """All values not ending with the given string."""
  food_string_not_ends_with: String
  user: UserWhereInput
}

input DailyRecordWhereUniqueInput {
  id: ID
  user_id: String
}

scalar DateTime

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createProfile(data: ProfileCreateInput!): Profile!
  createDailyRecord(data: DailyRecordCreateInput!): DailyRecord!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  updateDailyRecord(data: DailyRecordUpdateInput!, where: DailyRecordWhereUniqueInput!): DailyRecord
  deleteUser(where: UserWhereUniqueInput!): User
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteDailyRecord(where: DailyRecordWhereUniqueInput!): DailyRecord
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertProfile(where: ProfileWhereUniqueInput!, create: ProfileCreateInput!, update: ProfileUpdateInput!): Profile!
  upsertDailyRecord(where: DailyRecordWhereUniqueInput!, create: DailyRecordCreateInput!, update: DailyRecordUpdateInput!): DailyRecord!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyProfiles(data: ProfileUpdateManyMutationInput!, where: ProfileWhereInput): BatchPayload!
  updateManyDailyRecords(data: DailyRecordUpdateManyMutationInput!, where: DailyRecordWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyProfiles(where: ProfileWhereInput): BatchPayload!
  deleteManyDailyRecords(where: DailyRecordWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Profile implements Node {
  id: ID!
  user_id: String!
  age: Int!
  weight: Int!
  height: Int!
  paleo: Boolean
  keto: Boolean
  veg: Boolean
  fat: Int!
  carbs: Int!
  protein: Int!
  fiber: Int!
  calories: Int!
  user: User!
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type ProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProfileEdge]!
  aggregate: AggregateProfile!
}

input ProfileCreateInput {
  id: ID
  user_id: String!
  age: Int!
  weight: Int!
  height: Int!
  paleo: Boolean
  keto: Boolean
  veg: Boolean
  fat: Int!
  carbs: Int!
  protein: Int!
  fiber: Int!
  calories: Int!
  user: UserCreateOneWithoutProfileInput!
}

input ProfileCreateOneWithoutUserInput {
  create: ProfileCreateWithoutUserInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateWithoutUserInput {
  id: ID
  user_id: String!
  age: Int!
  weight: Int!
  height: Int!
  paleo: Boolean
  keto: Boolean
  veg: Boolean
  fat: Int!
  carbs: Int!
  protein: Int!
  fiber: Int!
  calories: Int!
}

"""An edge in a connection."""
type ProfileEdge {
  """The item at the end of the edge."""
  node: Profile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProfileOrderByInput {
  id_ASC
  id_DESC
  user_id_ASC
  user_id_DESC
  age_ASC
  age_DESC
  weight_ASC
  weight_DESC
  height_ASC
  height_DESC
  paleo_ASC
  paleo_DESC
  keto_ASC
  keto_DESC
  veg_ASC
  veg_DESC
  fat_ASC
  fat_DESC
  carbs_ASC
  carbs_DESC
  protein_ASC
  protein_DESC
  fiber_ASC
  fiber_DESC
  calories_ASC
  calories_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProfilePreviousValues {
  id: ID!
  user_id: String!
  age: Int!
  weight: Int!
  height: Int!
  paleo: Boolean
  keto: Boolean
  veg: Boolean
  fat: Int!
  carbs: Int!
  protein: Int!
  fiber: Int!
  calories: Int!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type ProfileSubscriptionPayload {
  mutation: MutationType!
  node: Profile
  updatedFields: [String!]
  previousValues: ProfilePreviousValues
}

input ProfileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProfileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProfileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProfileSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProfileWhereInput
}

input ProfileUpdateInput {
  user_id: String
  age: Int
  weight: Int
  height: Int
  paleo: Boolean
  keto: Boolean
  veg: Boolean
  fat: Int
  carbs: Int
  protein: Int
  fiber: Int
  calories: Int
  user: UserUpdateOneRequiredWithoutProfileInput
}

input ProfileUpdateManyMutationInput {
  user_id: String
  age: Int
  weight: Int
  height: Int
  paleo: Boolean
  keto: Boolean
  veg: Boolean
  fat: Int
  carbs: Int
  protein: Int
  fiber: Int
  calories: Int
}

input ProfileUpdateOneWithoutUserInput {
  create: ProfileCreateWithoutUserInput
  connect: ProfileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProfileUpdateWithoutUserDataInput
  upsert: ProfileUpsertWithoutUserInput
}

input ProfileUpdateWithoutUserDataInput {
  user_id: String
  age: Int
  weight: Int
  height: Int
  paleo: Boolean
  keto: Boolean
  veg: Boolean
  fat: Int
  carbs: Int
  protein: Int
  fiber: Int
  calories: Int
}

input ProfileUpsertWithoutUserInput {
  update: ProfileUpdateWithoutUserDataInput!
  create: ProfileCreateWithoutUserInput!
}

input ProfileWhereInput {
  """Logical AND on all given filters."""
  AND: [ProfileWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProfileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProfileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user_id: String

  """All values that are not equal to given value."""
  user_id_not: String

  """All values that are contained in given list."""
  user_id_in: [String!]

  """All values that are not contained in given list."""
  user_id_not_in: [String!]

  """All values less than the given value."""
  user_id_lt: String

  """All values less than or equal the given value."""
  user_id_lte: String

  """All values greater than the given value."""
  user_id_gt: String

  """All values greater than or equal the given value."""
  user_id_gte: String

  """All values containing the given string."""
  user_id_contains: String

  """All values not containing the given string."""
  user_id_not_contains: String

  """All values starting with the given string."""
  user_id_starts_with: String

  """All values not starting with the given string."""
  user_id_not_starts_with: String

  """All values ending with the given string."""
  user_id_ends_with: String

  """All values not ending with the given string."""
  user_id_not_ends_with: String
  age: Int

  """All values that are not equal to given value."""
  age_not: Int

  """All values that are contained in given list."""
  age_in: [Int!]

  """All values that are not contained in given list."""
  age_not_in: [Int!]

  """All values less than the given value."""
  age_lt: Int

  """All values less than or equal the given value."""
  age_lte: Int

  """All values greater than the given value."""
  age_gt: Int

  """All values greater than or equal the given value."""
  age_gte: Int
  weight: Int

  """All values that are not equal to given value."""
  weight_not: Int

  """All values that are contained in given list."""
  weight_in: [Int!]

  """All values that are not contained in given list."""
  weight_not_in: [Int!]

  """All values less than the given value."""
  weight_lt: Int

  """All values less than or equal the given value."""
  weight_lte: Int

  """All values greater than the given value."""
  weight_gt: Int

  """All values greater than or equal the given value."""
  weight_gte: Int
  height: Int

  """All values that are not equal to given value."""
  height_not: Int

  """All values that are contained in given list."""
  height_in: [Int!]

  """All values that are not contained in given list."""
  height_not_in: [Int!]

  """All values less than the given value."""
  height_lt: Int

  """All values less than or equal the given value."""
  height_lte: Int

  """All values greater than the given value."""
  height_gt: Int

  """All values greater than or equal the given value."""
  height_gte: Int
  paleo: Boolean

  """All values that are not equal to given value."""
  paleo_not: Boolean
  keto: Boolean

  """All values that are not equal to given value."""
  keto_not: Boolean
  veg: Boolean

  """All values that are not equal to given value."""
  veg_not: Boolean
  fat: Int

  """All values that are not equal to given value."""
  fat_not: Int

  """All values that are contained in given list."""
  fat_in: [Int!]

  """All values that are not contained in given list."""
  fat_not_in: [Int!]

  """All values less than the given value."""
  fat_lt: Int

  """All values less than or equal the given value."""
  fat_lte: Int

  """All values greater than the given value."""
  fat_gt: Int

  """All values greater than or equal the given value."""
  fat_gte: Int
  carbs: Int

  """All values that are not equal to given value."""
  carbs_not: Int

  """All values that are contained in given list."""
  carbs_in: [Int!]

  """All values that are not contained in given list."""
  carbs_not_in: [Int!]

  """All values less than the given value."""
  carbs_lt: Int

  """All values less than or equal the given value."""
  carbs_lte: Int

  """All values greater than the given value."""
  carbs_gt: Int

  """All values greater than or equal the given value."""
  carbs_gte: Int
  protein: Int

  """All values that are not equal to given value."""
  protein_not: Int

  """All values that are contained in given list."""
  protein_in: [Int!]

  """All values that are not contained in given list."""
  protein_not_in: [Int!]

  """All values less than the given value."""
  protein_lt: Int

  """All values less than or equal the given value."""
  protein_lte: Int

  """All values greater than the given value."""
  protein_gt: Int

  """All values greater than or equal the given value."""
  protein_gte: Int
  fiber: Int

  """All values that are not equal to given value."""
  fiber_not: Int

  """All values that are contained in given list."""
  fiber_in: [Int!]

  """All values that are not contained in given list."""
  fiber_not_in: [Int!]

  """All values less than the given value."""
  fiber_lt: Int

  """All values less than or equal the given value."""
  fiber_lte: Int

  """All values greater than the given value."""
  fiber_gt: Int

  """All values greater than or equal the given value."""
  fiber_gte: Int
  calories: Int

  """All values that are not equal to given value."""
  calories_not: Int

  """All values that are contained in given list."""
  calories_in: [Int!]

  """All values that are not contained in given list."""
  calories_not_in: [Int!]

  """All values less than the given value."""
  calories_lt: Int

  """All values less than or equal the given value."""
  calories_lte: Int

  """All values greater than the given value."""
  calories_gt: Int

  """All values greater than or equal the given value."""
  calories_gte: Int
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  user: UserWhereInput
}

input ProfileWhereUniqueInput {
  id: ID
  user_id: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  profiles(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Profile]!
  dailyRecords(where: DailyRecordWhereInput, orderBy: DailyRecordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DailyRecord]!
  user(where: UserWhereUniqueInput!): User
  profile(where: ProfileWhereUniqueInput!): Profile
  dailyRecord(where: DailyRecordWhereUniqueInput!): DailyRecord
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  profilesConnection(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfileConnection!
  dailyRecordsConnection(where: DailyRecordWhereInput, orderBy: DailyRecordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DailyRecordConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  profile(where: ProfileSubscriptionWhereInput): ProfileSubscriptionPayload
  dailyRecord(where: DailyRecordSubscriptionWhereInput): DailyRecordSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  updatedAt: DateTime!
  createdAt: DateTime!
  profile: Profile
  daily_records(where: DailyRecordWhereInput, orderBy: DailyRecordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DailyRecord!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  profile: ProfileCreateOneWithoutUserInput
  daily_records: DailyRecordCreateManyWithoutUserInput
}

input UserCreateOneWithoutDaily_recordsInput {
  create: UserCreateWithoutDaily_recordsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutDaily_recordsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  profile: ProfileCreateOneWithoutUserInput
}

input UserCreateWithoutProfileInput {
  id: ID
  name: String!
  email: String!
  password: String!
  daily_records: DailyRecordCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  profile: ProfileUpdateOneWithoutUserInput
  daily_records: DailyRecordUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutDaily_recordsInput {
  create: UserCreateWithoutDaily_recordsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutDaily_recordsDataInput
  upsert: UserUpsertWithoutDaily_recordsInput
}

input UserUpdateOneRequiredWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutProfileDataInput
  upsert: UserUpsertWithoutProfileInput
}

input UserUpdateWithoutDaily_recordsDataInput {
  name: String
  email: String
  password: String
  profile: ProfileUpdateOneWithoutUserInput
}

input UserUpdateWithoutProfileDataInput {
  name: String
  email: String
  password: String
  daily_records: DailyRecordUpdateManyWithoutUserInput
}

input UserUpsertWithoutDaily_recordsInput {
  update: UserUpdateWithoutDaily_recordsDataInput!
  create: UserCreateWithoutDaily_recordsInput!
}

input UserUpsertWithoutProfileInput {
  update: UserUpdateWithoutProfileDataInput!
  create: UserCreateWithoutProfileInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  profile: ProfileWhereInput
  daily_records_every: DailyRecordWhereInput
  daily_records_some: DailyRecordWhereInput
  daily_records_none: DailyRecordWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
